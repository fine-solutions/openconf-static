import eleventyVitePlugin from '@11ty/eleventy-plugin-vite'
import path from 'path'
import postcssImport from 'postcss-import'
import postcssMediaMinmax from 'postcss-media-minmax'
import autoprefixer from 'autoprefixer'
import postcssCsso from 'postcss-csso'
import htmlMin from 'html-minifier-terser'
import { parseHTML } from 'linkedom'

import constants from './config/constants.js'

export default async function(config) {
  // Settings
  config.setDataDeepMerge(true)
  config.addTemplateFormats('css')
  config.addWatchTarget('./src/styles/**/*.css')

  // Plugins
  config.addPlugin(eleventyVitePlugin, {
    showAllHosts: true,

    serverOptions: {
      liveReload: true,
      domDiff: true,
      port: 8080,
      showAllHosts: false,
      encoding: 'utf-8',
      showVersion: false,
    },

    viteOptions: {
      clearScreen: false,
      appType: 'mpa',
      liveReload: true,

      server: {
        mode: 'development',
        middlewareMode: true,
      },

      build: {
        mode: "production",
      },

      cacheDir: '.vite',

      css: {
        postcss: {
          plugins: [
            postcssImport,
            postcssMediaMinmax,
            autoprefixer,
            postcssCsso({
              restructure: false,
            }),
          ],
        },
      },

      resolve: {
        alias: {
          '/styles': path.resolve('.', 'src/styles'),
          '/scripts': path.resolve('.', 'src/scripts'),
          scripts: path.resolve('.', 'src/scripts'),
        },
      },
    },
  })

  // Extensions
  // Collections
  config.addCollection('news', function(collection) {
    return collection.getFilteredByGlob('src/pages/news/*/index.md')
  })

  config.addCollection('accommodations', function(collection) {
    return collection.getFilteredByGlob('src/pages/accommodations/*/index.md')
  })

  config.addCollection('tags', function() {
    return [
      {
        label: 'Важно',
        title: 'С этим тегом публикуются наиболее важные новости конференции',
        url: 'important',
      }
    ]
  })

  // Libraries
  // Shortcodes
  config.addShortcode('newsArticleDate', ( timeStamp ) => {
    const date = new Date(timeStamp)
    return `${date.toLocaleString('ru-RU')}`
  })

  // Filters
  // Transforms
  config.addTransform('html-minify', (content, path) => {
    if (path && path.endsWith('.html')) {
      return htmlMin.minify(
        content, {
          collapseBooleanAttributes: true,
          collapseWhitespace: true,
          decodeEntities: true,
          includeAutoGeneratedTags: false,
          removeComments: true,
        }
      )
    }

    return content
  })

  config.addTransform('unused-font-remover', (content, outputPath) => {
    if (outputPath && outputPath.endsWith('.html')) {
      const window = parseHTML(content)
      const isCaptionExists = !!window.document.querySelector('.caption')
      const isInputExists = !!window.document.querySelector('.input')
      const isTitleExists = !!window.document.querySelector('.title')
      const isValueExists = !!window.document.querySelector('.value')
      const isTextExists = !!window.document.querySelector('.text')
      const isTagExists = !!window.document.querySelector('.tag')
      const isStrongExists = !!window.document.querySelector('.strong')
      const isMenuExists = !!window.document.querySelector('.menu')

      if (!isInputExists && !isTagExists && !isMenuExists) {
        window.document.querySelector("link[href='/fonts/RobotoMono/RobotoMono-Regular.woff2']").remove()
      }
      if (!isCaptionExists && !isTitleExists) {
        window.document.querySelector("link[href='/fonts/RobotoMono/RobotoMono-Bold.woff2']").remove()
      }
      if (!isValueExists) {
        window.document.querySelector("link[href='/fonts/RobotoMono/RobotoMono-Light.woff2']").remove()
      }
      if (!isTextExists) {
        window.document.querySelector("link[href='/fonts/Roboto/Roboto-Regular.woff2']").remove()
      }
      if (!isStrongExists) {
        window.document.querySelector("link[href='/fonts/Roboto/Roboto-Semibold.woff2']").remove()
      }
    }

    return content
  })

  // PassthroughCopy
  const faviconKey = `src/favicon-${constants.baseSuffix}.ico`
  const faviconSetting = {}
  faviconSetting[faviconKey] = 'favicon.ico'
  const logosKey = `src/images/logo-${constants.baseSuffix}.*`
  const logosSetting = {}
  logosSetting[logosKey] = 'images/logo'
  const imagesFolders = ['index', 'partners', 'speakers', 'icons', 'accommodation']

  config.addPassthroughCopy(faviconSetting)
  config.addPassthroughCopy(logosSetting)
  imagesFolders.forEach((folder) => {
    config.addPassthroughCopy(`src/images/${folder}`)
  })

  config.addPassthroughCopy('src/docs/**/*')
  config.addPassthroughCopy('src/manifest.json')
  config.addPassthroughCopy('src/robots.txt')
  config.addPassthroughCopy('src/fonts')

  // Return
  return {
    dir: {
      input: 'src',
      output: 'dist',
      includes: 'includes',
      layouts: 'layouts',
      data: 'data',
    },
    dataTemplateEngine: 'njk',
    markdownTemplateEngine: false,
    htmlTemplateEngine: 'njk',
    passthroughFileCopy: true,
    templateFormats: ['md', 'njk'],
  }
}
